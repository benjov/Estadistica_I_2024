###Como alternativa podemos usar bibliotecas que contengan un proceso como el que ocuparemos
install.packages("AER")
# Sin Dependencias
library(AER)
# Con  Dependencias
library(car)
library(carData)
library(lmtest)
library(zoo)
library(sandwich)
library(survival)
library(AER)
### Librería para descargar series financieras y graficarlas
install.packages("quantmod")
install.packages("highcharter")
install.packages("ggplot2")
library(xts)
library(TTR)
library(quantmod)
library(highcharter)
library(ggplot2)
options("getSymbols.warning4.0" = FALSE)
### Descargamos la serie de las acciones de Amazon
getSymbols("AMZN")
head(AMZN, 2)
### Gráfico
hchart(AMZN)
### Descargamos la serie de Nasdaq
getSymbols("NDAQ")
head(NDAQ, 2)
### Gráfico
hchart(NDAQ)
##
class(AMZN)
### Análisis exploratorio de datos con ggplot
ggplot(data = miData, aes(x = Nombre, y = Edad, group = 1)) +
geom_line(color = "red") + geom_point(color = "blue") +
ggtitle("Edades")
#
library(dplyr)
library(ggplot2)
#****************************************************************************************
getwd()
setwd("")
getwd()
args(rnorm)
rnorm(10, mean = 0, sd = 2)
# Importante (para Simulaciones que sean replicables):
#set.seed(10101) # Es una constate (la semilla) que fija la serie de numeros aleatorios
Z_t <- rnorm(1000, mean = 0, sd = 2)
mean(Z_t)
sd(Z_t)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
# ¿Cómo guardar la gráfica?
png("G_Z_t.jpg",  width = 900)
hist(Z_t,
main = "Histograma del proceso Z_t, Normal(0, 2)",
xlab = "Z_t",
ylab = "Frecuencia")
dev.off()
Moneda <- function(R, Time){
# R: es el conjunto del cual se extrae la muestra - espacio muestral
# Time: es el tamaño de la serie resultante
# S: es el tamaño de los subconjuntos generados
U_t <- replicate(Time,
sample(R, size = 1, replace = TRUE) )
# Esta es una funcion que genera un vector de resultados aleatorios de los posibles en
# el espacio muestral, tomando muestras de tamaño 1
return(U_t)
}
Resultados <- c(-1, 1)
#
Periodos <- 10000
# Creamos un data frame de nombre "U" con una columna llamada "Tiempo"
U <- data.frame(Tiempo = c(1:Periodos))
U$U_t <- Moneda( Resultados, Periodos )
#
mu = mean(U$U_t)
mu
#
S2 = var(U$U_t)
S2
# Agregamos al data frame una columna SU_t que llenamos de ceros (0)
U$SU_t <- replicate(Periodos, 0)
View(U)
# El siguiente ciclo recorre el data frame para ir acumulando los valores de U_t
# y colocando el valor acumulado en SU_t
for(i in 1:Periodos){
U$SU_t[i] <- sum( U$U_t[1:i] )
}
View(U)
# GRÁFICA
ggplot(data = U, aes( x = Tiempo, y = SU_t) ) +
geom_line(size = 0.5, color = "darkblue") +
#geom_point(size = 1.0, color = "darkblue") +
#theme_bw() +
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Tiempo") +
ylab("Xt") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(size = 10, hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Gráfica de la serie de lanzamientos de una moneda",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia. \nNotas: Simulación del lanzamiento de una moneda."
)
ggsave("Lanzamiento_Moneda.png", width = 30, height = 15, units = "cm")
# Utilizaremos una función guardada en un archivo a parte
# Llamamos a la función:
source("Caminata.R")
